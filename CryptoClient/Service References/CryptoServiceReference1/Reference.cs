//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryptoClient.CryptoServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CryptoServiceReference1.ICryptoService")]
    public interface ICryptoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSACrypt", ReplyAction="http://tempuri.org/ICryptoService/RSACryptResponse")]
        byte[] RSACrypt(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSACrypt", ReplyAction="http://tempuri.org/ICryptoService/RSACryptResponse")]
        System.Threading.Tasks.Task<byte[]> RSACryptAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSADecrypt", ReplyAction="http://tempuri.org/ICryptoService/RSADecryptResponse")]
        byte[] RSADecrypt(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSADecrypt", ReplyAction="http://tempuri.org/ICryptoService/RSADecryptResponse")]
        System.Threading.Tasks.Task<byte[]> RSADecryptAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSACryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RSACryptCTRResponse")]
        byte[] RSACryptCTR(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSACryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RSACryptCTRResponse")]
        System.Threading.Tasks.Task<byte[]> RSACryptCTRAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSADecryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RSADecryptCTRResponse")]
        byte[] RSADecryptCTR(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSADecryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RSADecryptCTRResponse")]
        System.Threading.Tasks.Task<byte[]> RSADecryptCTRAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSASetIV", ReplyAction="http://tempuri.org/ICryptoService/RSASetIVResponse")]
        bool RSASetIV(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSASetIV", ReplyAction="http://tempuri.org/ICryptoService/RSASetIVResponse")]
        System.Threading.Tasks.Task<bool> RSASetIVAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSAGenerateRandomIV", ReplyAction="http://tempuri.org/ICryptoService/RSAGenerateRandomIVResponse")]
        byte[] RSAGenerateRandomIV();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSAGenerateRandomIV", ReplyAction="http://tempuri.org/ICryptoService/RSAGenerateRandomIVResponse")]
        System.Threading.Tasks.Task<byte[]> RSAGenerateRandomIVAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSASetAlgorithmProperties", ReplyAction="http://tempuri.org/ICryptoService/RSASetAlgorithmPropertiesResponse")]
        bool RSASetAlgorithmProperties(System.Collections.Generic.Dictionary<string, byte[]> specArguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSASetAlgorithmProperties", ReplyAction="http://tempuri.org/ICryptoService/RSASetAlgorithmPropertiesResponse")]
        System.Threading.Tasks.Task<bool> RSASetAlgorithmPropertiesAsync(System.Collections.Generic.Dictionary<string, byte[]> specArguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4Crypt", ReplyAction="http://tempuri.org/ICryptoService/RC4CryptResponse")]
        byte[] RC4Crypt(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4Crypt", ReplyAction="http://tempuri.org/ICryptoService/RC4CryptResponse")]
        System.Threading.Tasks.Task<byte[]> RC4CryptAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4CryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RC4CryptCTRResponse")]
        byte[] RC4CryptCTR(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4CryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RC4CryptCTRResponse")]
        System.Threading.Tasks.Task<byte[]> RC4CryptCTRAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4Decrypt", ReplyAction="http://tempuri.org/ICryptoService/RC4DecryptResponse")]
        byte[] RC4Decrypt(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4Decrypt", ReplyAction="http://tempuri.org/ICryptoService/RC4DecryptResponse")]
        System.Threading.Tasks.Task<byte[]> RC4DecryptAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4DecryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RC4DecryptCTRResponse")]
        byte[] RC4DecryptCTR(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4DecryptCTR", ReplyAction="http://tempuri.org/ICryptoService/RC4DecryptCTRResponse")]
        System.Threading.Tasks.Task<byte[]> RC4DecryptCTRAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4SetKey", ReplyAction="http://tempuri.org/ICryptoService/RC4SetKeyResponse")]
        bool RC4SetKey(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4SetKey", ReplyAction="http://tempuri.org/ICryptoService/RC4SetKeyResponse")]
        System.Threading.Tasks.Task<bool> RC4SetKeyAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4GenerateRandomKey", ReplyAction="http://tempuri.org/ICryptoService/RC4GenerateRandomKeyResponse")]
        byte[] RC4GenerateRandomKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4GenerateRandomKey", ReplyAction="http://tempuri.org/ICryptoService/RC4GenerateRandomKeyResponse")]
        System.Threading.Tasks.Task<byte[]> RC4GenerateRandomKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4SetIV", ReplyAction="http://tempuri.org/ICryptoService/RC4SetIVResponse")]
        bool RC4SetIV(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4SetIV", ReplyAction="http://tempuri.org/ICryptoService/RC4SetIVResponse")]
        System.Threading.Tasks.Task<bool> RC4SetIVAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4GenerateRandomIV", ReplyAction="http://tempuri.org/ICryptoService/RC4GenerateRandomIVResponse")]
        byte[] RC4GenerateRandomIV();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4GenerateRandomIV", ReplyAction="http://tempuri.org/ICryptoService/RC4GenerateRandomIVResponse")]
        System.Threading.Tasks.Task<byte[]> RC4GenerateRandomIVAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4SetAlgorithmProperties", ReplyAction="http://tempuri.org/ICryptoService/RC4SetAlgorithmPropertiesResponse")]
        bool RC4SetAlgorithmProperties(System.Collections.Generic.Dictionary<string, byte[]> specArguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RC4SetAlgorithmProperties", ReplyAction="http://tempuri.org/ICryptoService/RC4SetAlgorithmPropertiesResponse")]
        System.Threading.Tasks.Task<bool> RC4SetAlgorithmPropertiesAsync(System.Collections.Generic.Dictionary<string, byte[]> specArguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2Crypt", ReplyAction="http://tempuri.org/ICryptoService/A5_2CryptResponse")]
        byte[] A5_2Crypt(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2Crypt", ReplyAction="http://tempuri.org/ICryptoService/A5_2CryptResponse")]
        System.Threading.Tasks.Task<byte[]> A5_2CryptAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2Decrypt", ReplyAction="http://tempuri.org/ICryptoService/A5_2DecryptResponse")]
        byte[] A5_2Decrypt(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2Decrypt", ReplyAction="http://tempuri.org/ICryptoService/A5_2DecryptResponse")]
        System.Threading.Tasks.Task<byte[]> A5_2DecryptAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2SetKey", ReplyAction="http://tempuri.org/ICryptoService/A5_2SetKeyResponse")]
        bool A5_2SetKey(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2SetKey", ReplyAction="http://tempuri.org/ICryptoService/A5_2SetKeyResponse")]
        System.Threading.Tasks.Task<bool> A5_2SetKeyAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2GenerateRandomKey", ReplyAction="http://tempuri.org/ICryptoService/A5_2GenerateRandomKeyResponse")]
        byte[] A5_2GenerateRandomKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2GenerateRandomKey", ReplyAction="http://tempuri.org/ICryptoService/A5_2GenerateRandomKeyResponse")]
        System.Threading.Tasks.Task<byte[]> A5_2GenerateRandomKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2SetIV", ReplyAction="http://tempuri.org/ICryptoService/A5_2SetIVResponse")]
        bool A5_2SetIV(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2SetIV", ReplyAction="http://tempuri.org/ICryptoService/A5_2SetIVResponse")]
        System.Threading.Tasks.Task<bool> A5_2SetIVAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2GenerateRandomIV", ReplyAction="http://tempuri.org/ICryptoService/A5_2GenerateRandomIVResponse")]
        byte[] A5_2GenerateRandomIV();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A5_2GenerateRandomIV", ReplyAction="http://tempuri.org/ICryptoService/A5_2GenerateRandomIVResponse")]
        System.Threading.Tasks.Task<byte[]> A5_2GenerateRandomIVAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/TigerHash", ReplyAction="http://tempuri.org/ICryptoService/TigerHashResponse")]
        byte[] TigerHash(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/TigerHash", ReplyAction="http://tempuri.org/ICryptoService/TigerHashResponse")]
        System.Threading.Tasks.Task<byte[]> TigerHashAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Upload", ReplyAction="http://tempuri.org/ICryptoService/UploadResponse")]
        void Upload(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Upload", ReplyAction="http://tempuri.org/ICryptoService/UploadResponse")]
        System.Threading.Tasks.Task UploadAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Download", ReplyAction="http://tempuri.org/ICryptoService/DownloadResponse")]
        byte[] Download(string fileName, string al);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Download", ReplyAction="http://tempuri.org/ICryptoService/DownloadResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadAsync(string fileName, string al);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GetFiles", ReplyAction="http://tempuri.org/ICryptoService/GetFilesResponse")]
        string[] GetFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GetFiles", ReplyAction="http://tempuri.org/ICryptoService/GetFilesResponse")]
        System.Threading.Tasks.Task<string[]> GetFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DeleteFile", ReplyAction="http://tempuri.org/ICryptoService/DeleteFileResponse")]
        void DeleteFile(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DeleteFile", ReplyAction="http://tempuri.org/ICryptoService/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Update", ReplyAction="http://tempuri.org/ICryptoService/UpdateResponse")]
        void Update(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Update", ReplyAction="http://tempuri.org/ICryptoService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(byte[] input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptoServiceChannel : CryptoClient.CryptoServiceReference1.ICryptoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptoServiceClient : System.ServiceModel.ClientBase<CryptoClient.CryptoServiceReference1.ICryptoService>, CryptoClient.CryptoServiceReference1.ICryptoService {
        
        public CryptoServiceClient() {
        }
        
        public CryptoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] RSACrypt(byte[] input) {
            return base.Channel.RSACrypt(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RSACryptAsync(byte[] input) {
            return base.Channel.RSACryptAsync(input);
        }
        
        public byte[] RSADecrypt(byte[] input) {
            return base.Channel.RSADecrypt(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RSADecryptAsync(byte[] input) {
            return base.Channel.RSADecryptAsync(input);
        }
        
        public byte[] RSACryptCTR(byte[] input) {
            return base.Channel.RSACryptCTR(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RSACryptCTRAsync(byte[] input) {
            return base.Channel.RSACryptCTRAsync(input);
        }
        
        public byte[] RSADecryptCTR(byte[] input) {
            return base.Channel.RSADecryptCTR(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RSADecryptCTRAsync(byte[] input) {
            return base.Channel.RSADecryptCTRAsync(input);
        }
        
        public bool RSASetIV(byte[] input) {
            return base.Channel.RSASetIV(input);
        }
        
        public System.Threading.Tasks.Task<bool> RSASetIVAsync(byte[] input) {
            return base.Channel.RSASetIVAsync(input);
        }
        
        public byte[] RSAGenerateRandomIV() {
            return base.Channel.RSAGenerateRandomIV();
        }
        
        public System.Threading.Tasks.Task<byte[]> RSAGenerateRandomIVAsync() {
            return base.Channel.RSAGenerateRandomIVAsync();
        }
        
        public bool RSASetAlgorithmProperties(System.Collections.Generic.Dictionary<string, byte[]> specArguments) {
            return base.Channel.RSASetAlgorithmProperties(specArguments);
        }
        
        public System.Threading.Tasks.Task<bool> RSASetAlgorithmPropertiesAsync(System.Collections.Generic.Dictionary<string, byte[]> specArguments) {
            return base.Channel.RSASetAlgorithmPropertiesAsync(specArguments);
        }
        
        public byte[] RC4Crypt(byte[] input) {
            return base.Channel.RC4Crypt(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RC4CryptAsync(byte[] input) {
            return base.Channel.RC4CryptAsync(input);
        }
        
        public byte[] RC4CryptCTR(byte[] input) {
            return base.Channel.RC4CryptCTR(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RC4CryptCTRAsync(byte[] input) {
            return base.Channel.RC4CryptCTRAsync(input);
        }
        
        public byte[] RC4Decrypt(byte[] input) {
            return base.Channel.RC4Decrypt(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RC4DecryptAsync(byte[] input) {
            return base.Channel.RC4DecryptAsync(input);
        }
        
        public byte[] RC4DecryptCTR(byte[] input) {
            return base.Channel.RC4DecryptCTR(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> RC4DecryptCTRAsync(byte[] input) {
            return base.Channel.RC4DecryptCTRAsync(input);
        }
        
        public bool RC4SetKey(byte[] input) {
            return base.Channel.RC4SetKey(input);
        }
        
        public System.Threading.Tasks.Task<bool> RC4SetKeyAsync(byte[] input) {
            return base.Channel.RC4SetKeyAsync(input);
        }
        
        public byte[] RC4GenerateRandomKey() {
            return base.Channel.RC4GenerateRandomKey();
        }
        
        public System.Threading.Tasks.Task<byte[]> RC4GenerateRandomKeyAsync() {
            return base.Channel.RC4GenerateRandomKeyAsync();
        }
        
        public bool RC4SetIV(byte[] input) {
            return base.Channel.RC4SetIV(input);
        }
        
        public System.Threading.Tasks.Task<bool> RC4SetIVAsync(byte[] input) {
            return base.Channel.RC4SetIVAsync(input);
        }
        
        public byte[] RC4GenerateRandomIV() {
            return base.Channel.RC4GenerateRandomIV();
        }
        
        public System.Threading.Tasks.Task<byte[]> RC4GenerateRandomIVAsync() {
            return base.Channel.RC4GenerateRandomIVAsync();
        }
        
        public bool RC4SetAlgorithmProperties(System.Collections.Generic.Dictionary<string, byte[]> specArguments) {
            return base.Channel.RC4SetAlgorithmProperties(specArguments);
        }
        
        public System.Threading.Tasks.Task<bool> RC4SetAlgorithmPropertiesAsync(System.Collections.Generic.Dictionary<string, byte[]> specArguments) {
            return base.Channel.RC4SetAlgorithmPropertiesAsync(specArguments);
        }
        
        public byte[] A5_2Crypt(byte[] input) {
            return base.Channel.A5_2Crypt(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> A5_2CryptAsync(byte[] input) {
            return base.Channel.A5_2CryptAsync(input);
        }
        
        public byte[] A5_2Decrypt(byte[] input) {
            return base.Channel.A5_2Decrypt(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> A5_2DecryptAsync(byte[] input) {
            return base.Channel.A5_2DecryptAsync(input);
        }
        
        public bool A5_2SetKey(byte[] input) {
            return base.Channel.A5_2SetKey(input);
        }
        
        public System.Threading.Tasks.Task<bool> A5_2SetKeyAsync(byte[] input) {
            return base.Channel.A5_2SetKeyAsync(input);
        }
        
        public byte[] A5_2GenerateRandomKey() {
            return base.Channel.A5_2GenerateRandomKey();
        }
        
        public System.Threading.Tasks.Task<byte[]> A5_2GenerateRandomKeyAsync() {
            return base.Channel.A5_2GenerateRandomKeyAsync();
        }
        
        public bool A5_2SetIV(byte[] input) {
            return base.Channel.A5_2SetIV(input);
        }
        
        public System.Threading.Tasks.Task<bool> A5_2SetIVAsync(byte[] input) {
            return base.Channel.A5_2SetIVAsync(input);
        }
        
        public byte[] A5_2GenerateRandomIV() {
            return base.Channel.A5_2GenerateRandomIV();
        }
        
        public System.Threading.Tasks.Task<byte[]> A5_2GenerateRandomIVAsync() {
            return base.Channel.A5_2GenerateRandomIVAsync();
        }
        
        public byte[] TigerHash(byte[] input) {
            return base.Channel.TigerHash(input);
        }
        
        public System.Threading.Tasks.Task<byte[]> TigerHashAsync(byte[] input) {
            return base.Channel.TigerHashAsync(input);
        }
        
        public void Upload(byte[] input) {
            base.Channel.Upload(input);
        }
        
        public System.Threading.Tasks.Task UploadAsync(byte[] input) {
            return base.Channel.UploadAsync(input);
        }
        
        public byte[] Download(string fileName, string al) {
            return base.Channel.Download(fileName, al);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadAsync(string fileName, string al) {
            return base.Channel.DownloadAsync(fileName, al);
        }
        
        public string[] GetFiles() {
            return base.Channel.GetFiles();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilesAsync() {
            return base.Channel.GetFilesAsync();
        }
        
        public void DeleteFile(string name) {
            base.Channel.DeleteFile(name);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(string name) {
            return base.Channel.DeleteFileAsync(name);
        }
        
        public void Update(byte[] input) {
            base.Channel.Update(input);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(byte[] input) {
            return base.Channel.UpdateAsync(input);
        }
    }
}
